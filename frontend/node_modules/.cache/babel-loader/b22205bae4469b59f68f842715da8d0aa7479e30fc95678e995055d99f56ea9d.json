{"ast":null,"code":"const createBlog = async blog => {\n  const response = await fetch(\"http://localhost:8000/api/blogs\", {\n    method: \"POST\",\n    headers: {\n      \"Content-Type\": \"application/json\"\n    },\n    body: JSON.stringify(blog)\n  });\n  if (!response.ok) {\n    try {\n      let res = await response.json();\n      throw res.message || JSON.stringify(res);\n    } catch (err) {\n      console.log(err);\n      const error = new Error(\"Something went wrong\");\n      throw error.message;\n    }\n  }\n  const blogsApiData = await response.json();\n  return blogsApiData;\n};\nconst fetchBlogs = async () => {\n  const response = await fetch(\"http://localhost:8000/api/blogs\", {\n    method: \"GET\",\n    headers: {\n      \"Content-Type\": \"application/json\"\n    }\n  });\n  if (!response.ok) {\n    try {\n      let res = await response.json();\n      throw res.message || JSON.stringify(res);\n    } catch (err) {\n      console.log(err);\n      const error = new Error(\"Something went wrong\");\n      throw error.message;\n    }\n  }\n  const blogsApiData = await response.json();\n  return blogsApiData;\n};\nconst fetchBlogByID = async id => {\n  const response = await fetch(\"http://localhost:8000/api/blogs/\" + id, {\n    method: \"GET\",\n    headers: {\n      \"Content-Type\": \"application/json\"\n    }\n  });\n  if (!response.ok) {\n    try {\n      let res = await response.json();\n      throw res.message || JSON.stringify(res);\n    } catch (err) {\n      console.log(err);\n      const error = new Error(\"Something went wrong\");\n      throw error.message;\n    }\n  }\n  const blogsApiData = await response.json();\n  return blogsApiData;\n};\nconst fetchBlogsByCategoryId = async categoryId => {\n  const response = await fetch(\"http://localhost:8000/api/blogs/categories/\" + categoryId, {\n    method: \"GET\",\n    headers: {\n      \"Content-Type\": \"application/json\"\n    }\n  });\n  if (!response.ok) {\n    try {\n      let res = await response.json();\n      throw res.message || JSON.stringify(res);\n    } catch (err) {\n      console.log(err);\n      const error = new Error(\"Something went wrong\");\n      throw error.message;\n    }\n  }\n  const blogsApiData = await response.json();\n  return blogsApiData;\n};\nconst fetchBlogsByAuthorId = async authorId => {\n  const response = await fetch(\"http://localhost:8000/api/blogs/author/\" + authorId, {\n    method: \"GET\",\n    headers: {\n      \"Content-Type\": \"application/json\"\n    }\n  });\n  if (!response.ok) {\n    try {\n      let res = await response.json();\n      throw res.message || JSON.stringify(res);\n    } catch (err) {\n      console.log(err);\n      const error = new Error(\"Something went wrong\");\n      throw error.message;\n    }\n  }\n  const blogsApiData = await response.json();\n  return blogsApiData;\n};\nconst updateBlog = async blog => {\n  const response = await fetch(\"http://localhost:8000/api/blogs/\" + blog.id, {\n    method: \"PUT\",\n    headers: {\n      \"Content-Type\": \"application/json\"\n    },\n    body: JSON.stringify(blog)\n  });\n  if (!response.ok) {\n    try {\n      let res = await response.json();\n      throw res.message || JSON.stringify(res);\n    } catch (err) {\n      console.log(err);\n      const error = new Error(\"Something went wrong\");\n      throw error.message;\n    }\n  }\n  const blogsApiData = await response.json();\n  return blogsApiData;\n};\nconst deleteBlog = async id => {\n  const response = await fetch(\"http://localhost:8000/api/blogs/\" + id, {\n    method: \"DELETE\",\n    headers: {\n      \"Content-Type\": \"application/json\"\n    }\n  });\n  if (!response.ok) {\n    try {\n      let res = await response.json();\n      throw res.message || JSON.stringify(res);\n    } catch (err) {\n      console.log(err);\n      const error = new Error(\"Something went wrong\");\n      throw error.message;\n    }\n  }\n  const blogsApiData = await response.json();\n  return blogsApiData;\n};\nconst blogService = {\n  createBlog,\n  fetchBlogs,\n  fetchBlogByID,\n  fetchBlogsByCategoryId,\n  fetchBlogsByAuthorId,\n  updateBlog,\n  deleteBlog\n};\nexport default blogService;","map":{"version":3,"names":["createBlog","blog","response","fetch","method","headers","body","JSON","stringify","ok","res","json","message","err","console","log","error","Error","blogsApiData","fetchBlogs","fetchBlogByID","id","fetchBlogsByCategoryId","categoryId","fetchBlogsByAuthorId","authorId","updateBlog","deleteBlog","blogService"],"sources":["C:/Users/Samruddhi/Desktop/Personal Projects/IX/Bootcamp/Blog App/frontend/src/services/blogService.js"],"sourcesContent":["const createBlog = async (blog) => {\r\n  const response = await fetch(\"http://localhost:8000/api/blogs\", {\r\n    method: \"POST\",\r\n    headers: {\r\n      \"Content-Type\": \"application/json\",\r\n    },\r\n    body: JSON.stringify(blog),\r\n  });\r\n\r\n  if (!response.ok) {\r\n    try {\r\n      let res = await response.json();\r\n      throw res.message || JSON.stringify(res);\r\n    } catch (err) {\r\n      console.log(err);\r\n      const error = new Error(\"Something went wrong\");\r\n      throw error.message;\r\n    }\r\n  }\r\n\r\n  const blogsApiData = await response.json();\r\n  return blogsApiData;\r\n};\r\n\r\nconst fetchBlogs = async () => {\r\n  const response = await fetch(\"http://localhost:8000/api/blogs\", {\r\n    method: \"GET\",\r\n    headers: {\r\n      \"Content-Type\": \"application/json\",\r\n    },\r\n  });\r\n\r\n  if (!response.ok) {\r\n    try {\r\n      let res = await response.json();\r\n      throw res.message || JSON.stringify(res);\r\n    } catch (err) {\r\n      console.log(err);\r\n      const error = new Error(\"Something went wrong\");\r\n      throw error.message;\r\n    }\r\n  }\r\n\r\n  const blogsApiData = await response.json();\r\n  return blogsApiData;\r\n};\r\n\r\nconst fetchBlogByID = async (id) => {\r\n  const response = await fetch(\"http://localhost:8000/api/blogs/\" + id, {\r\n    method: \"GET\",\r\n    headers: {\r\n      \"Content-Type\": \"application/json\",\r\n    },\r\n  });\r\n  if (!response.ok) {\r\n    try {\r\n      let res = await response.json();\r\n      throw res.message || JSON.stringify(res);\r\n    } catch (err) {\r\n      console.log(err);\r\n      const error = new Error(\"Something went wrong\");\r\n      throw error.message;\r\n    }\r\n  }\r\n\r\n  const blogsApiData = await response.json();\r\n  return blogsApiData;\r\n};\r\n\r\nconst fetchBlogsByCategoryId = async (categoryId) => {\r\n  const response = await fetch(\r\n    \"http://localhost:8000/api/blogs/categories/\" + categoryId,\r\n    {\r\n      method: \"GET\",\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n      },\r\n    }\r\n  );\r\n  if (!response.ok) {\r\n    try {\r\n      let res = await response.json();\r\n      throw res.message || JSON.stringify(res);\r\n    } catch (err) {\r\n      console.log(err);\r\n      const error = new Error(\"Something went wrong\");\r\n      throw error.message;\r\n    }\r\n  }\r\n\r\n  const blogsApiData = await response.json();\r\n  return blogsApiData;\r\n};\r\n\r\nconst fetchBlogsByAuthorId = async (authorId) => {\r\n  const response = await fetch(\r\n    \"http://localhost:8000/api/blogs/author/\" + authorId,\r\n    {\r\n      method: \"GET\",\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n      },\r\n    }\r\n  );\r\n  if (!response.ok) {\r\n    try {\r\n      let res = await response.json();\r\n      throw res.message || JSON.stringify(res);\r\n    } catch (err) {\r\n      console.log(err);\r\n      const error = new Error(\"Something went wrong\");\r\n      throw error.message;\r\n    }\r\n  }\r\n\r\n  const blogsApiData = await response.json();\r\n  return blogsApiData;\r\n};\r\n\r\nconst updateBlog = async (blog) => {\r\n  const response = await fetch(\"http://localhost:8000/api/blogs/\" + blog.id, {\r\n    method: \"PUT\",\r\n    headers: {\r\n      \"Content-Type\": \"application/json\",\r\n    },\r\n    body: JSON.stringify(blog),\r\n  });\r\n  if (!response.ok) {\r\n    try {\r\n      let res = await response.json();\r\n      throw res.message || JSON.stringify(res);\r\n    } catch (err) {\r\n      console.log(err);\r\n      const error = new Error(\"Something went wrong\");\r\n      throw error.message;\r\n    }\r\n  }\r\n\r\n  const blogsApiData = await response.json();\r\n  return blogsApiData;\r\n};\r\n\r\nconst deleteBlog = async (id) => {\r\n  const response = await fetch(\"http://localhost:8000/api/blogs/\" + id, {\r\n    method: \"DELETE\",\r\n    headers: {\r\n      \"Content-Type\": \"application/json\",\r\n    },\r\n  });\r\n\r\n  if (!response.ok) {\r\n    try {\r\n      let res = await response.json();\r\n      throw res.message || JSON.stringify(res);\r\n    } catch (err) {\r\n      console.log(err);\r\n      const error = new Error(\"Something went wrong\");\r\n      throw error.message;\r\n    }\r\n  }\r\n\r\n  const blogsApiData = await response.json();\r\n  return blogsApiData;\r\n};\r\n\r\nconst blogService = {\r\n  createBlog,\r\n  fetchBlogs,\r\n  fetchBlogByID,\r\n  fetchBlogsByCategoryId,\r\n  fetchBlogsByAuthorId,\r\n  updateBlog,\r\n  deleteBlog,\r\n};\r\n\r\nexport default blogService;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}